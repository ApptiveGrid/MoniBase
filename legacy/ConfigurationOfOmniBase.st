'From Pharo3.0 of 18 March 2013 [Latest update: #30784] on 3 March 2014 at 12:28:03.093304 pm'!Object subclass: #ConfigurationOfOmniBase	instanceVariableNames: 'project'	classVariableNames: 'LastVersionLoad'	poolDictionaries: ''	category: 'ConfigurationOfOmniBase'!!ConfigurationOfOmniBase commentStamp: '<historical>' prior: 0!!!ConfigurationOfOmniBase methodsFor: 'accessing' stamp: 'sebastiansastre 12/7/2011 23:59'!stable: spec	spec  for: #common version:'1.0'! !!ConfigurationOfOmniBase methodsFor: 'accessing' stamp: 'sebastiansastre 12/7/2011 23:46'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear.		project ]! !!ConfigurationOfOmniBase methodsFor: 'doits' stamp: 'sebastiansastre 12/8/2011 10:49'!initialization10	(Smalltalk at:#OmniBase) initialize! !!ConfigurationOfOmniBase methodsFor: 'versions' stamp: 'NicolasPetton 12/9/2011 13:53'!version10: spec	<version: '1.0' imports: #('1.0-baseline')>		spec for: #common do: [		spec blessing: #release.      	spec description: 'Publishing a maintained OmniBase for Pharo'.  				spec package: 'OmniBase' with: 'OmniBase-NicolasPetton.7'.		spec package: 'Unexpire' with: 'Unexpire-sebastiansastre.19'.		spec package: 'omnibasePatch' with: 'omnibasePatch-NicolasPetton.15'.		spec package: 'omnibaseExtensions' with: 'omnibaseExtensions-sebastiansastre.24'.		]! !!ConfigurationOfOmniBase methodsFor: 'versions' stamp: 'SebastianSastre 1/15/2012 16:06'!version11: spec	<version: '1.1' imports: #('1.0-baseline')>		spec for: #common do: [		spec blessing: #release.      	spec description: 'Publishing a maintained OmniBase for Pharo'.  				spec package: 'OmniBase' with: 'OmniBase-NicolasPetton.7'.		spec package: 'Unexpire' with: 'Unexpire-NicolasPetton.20'.		spec package: 'omnibasePatch' with: 'omnibasePatch-sebastiansastre.16'.		spec package: 'omnibaseExtensions' with: 'omnibaseExtensions-NicolasPetton.25'.		]! !!ConfigurationOfOmniBase methodsFor: 'baselines' stamp: 'sebastiansastre 12/8/2011 11:03'!baseline10: spec    <version: '1.0-baseline'>    	spec for: #squeakCommon do: [		spec blessing: #baseline.		spec repository: 'http://www.squeaksource.com/odb'.			spec project: 'FFI' with: [ spec				className: 'ConfigurationOfFFI';				file: 'ConfigurationOfFFI';				repository: 'http://squeaksource.com/MetacelloRepository'.				].		spec package: 'OSProcess' with:[ spec repository: 'http://www.squeaksource.com/OSProcess'].		spec package: 'OmniBase'.		spec package: 'Unexpire' with: [spec requires: 'OmniBase'].		spec package: 'omnibasePatch' with: [spec requires: 'OmniBase']..		spec package: 'omnibaseExtensions' with: [spec requires: 'OmniBase'].	]! !!ConfigurationOfOmniBase methodsFor: 'as yet unclassified' stamp: 'sebastiansastre 12/31/2013 11:17'!version13: spec	<version: '1.3' imports: #('1.1-baseline')>		spec for: #common do: [		spec blessing: #release.      	spec description: 'Publishing a maintained OmniBase for Pharo'.  				spec package: 'OmniBase' with: 'OmniBase-sebastiansastre.8'.		spec package: 'Unexpire' with: 'Unexpire-NicolasPetton.20'.		spec package: 'omnibasePatch' with: 'omnibasePatch-sebastiansastre.16'.		spec package: 'omnibaseExtensions' with: 'omnibaseExtensions-NicolasPetton.25'.		]! !!ConfigurationOfOmniBase methodsFor: 'as yet unclassified' stamp: 'sebastiansastre 12/20/2013 14:21'!version12: spec	<version: '1.2' imports: #('1.1-baseline')>		spec for: #common do: [		spec blessing: #release.      	spec description: 'Publishing a maintained OmniBase for Pharo'.  				spec package: 'OmniBase' with: 'OmniBase-NicolasPetton.7'.		spec package: 'Unexpire' with: 'Unexpire-NicolasPetton.20'.		spec package: 'omnibasePatch' with: 'omnibasePatch-sebastiansastre.16'.		spec package: 'omnibaseExtensions' with: 'omnibaseExtensions-NicolasPetton.25'.		]! !!ConfigurationOfOmniBase methodsFor: 'as yet unclassified' stamp: 'sebastiansastre 12/20/2013 14:20'!baseline11: spec    <version: '1.1-baseline'>    	spec for: #squeakCommon do: [		spec blessing: #baseline.		spec repository: 'http://www.squeaksource.com/odb'.			spec project: 'FFI' with: [ spec				className: 'ConfigurationOfFFI';				file: 'ConfigurationOfFFI';				repository: 'http://squeaksource.com/MetacelloRepository'.				].		spec project: 'OSProcess' with: [ spec				className: 'ConfigurationOfOSProcess';				file: 'ConfigurationOfOSProcess';				repository: 'http://squeaksource.com/MetacelloRepository'.				].		spec package: 'OmniBase'.		spec package: 'Unexpire' with: [spec requires: 'OmniBase'].		spec package: 'omnibasePatch' with: [spec requires: 'OmniBase']..		spec package: 'omnibaseExtensions' with: [spec requires: 'OmniBase'].	]! !!ConfigurationOfOmniBase methodsFor: 'accessing' stamp: 'sebastiansastre 12/7/2011 23:59'!stable: spec	spec  for: #common version:'1.0'! !!ConfigurationOfOmniBase methodsFor: 'accessing' stamp: 'sebastiansastre 12/7/2011 23:46'!project	^ project ifNil: [ | constructor |		"Bootstrap Metacello if it is not already loaded"		self class ensureMetacello.		"Construct Metacello project"		constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.		project := constructor project.		project loadType: #linear.		project ]! !!ConfigurationOfOmniBase methodsFor: 'doits' stamp: 'sebastiansastre 12/8/2011 10:49'!initialization10	(Smalltalk at:#OmniBase) initialize! !!ConfigurationOfOmniBase methodsFor: 'versions' stamp: 'NicolasPetton 12/9/2011 13:53'!version10: spec	<version: '1.0' imports: #('1.0-baseline')>		spec for: #common do: [		spec blessing: #release.      	spec description: 'Publishing a maintained OmniBase for Pharo'.  				spec package: 'OmniBase' with: 'OmniBase-NicolasPetton.7'.		spec package: 'Unexpire' with: 'Unexpire-sebastiansastre.19'.		spec package: 'omnibasePatch' with: 'omnibasePatch-NicolasPetton.15'.		spec package: 'omnibaseExtensions' with: 'omnibaseExtensions-sebastiansastre.24'.		]! !!ConfigurationOfOmniBase methodsFor: 'versions' stamp: 'SebastianSastre 1/15/2012 16:06'!version11: spec	<version: '1.1' imports: #('1.0-baseline')>		spec for: #common do: [		spec blessing: #release.      	spec description: 'Publishing a maintained OmniBase for Pharo'.  				spec package: 'OmniBase' with: 'OmniBase-NicolasPetton.7'.		spec package: 'Unexpire' with: 'Unexpire-NicolasPetton.20'.		spec package: 'omnibasePatch' with: 'omnibasePatch-sebastiansastre.16'.		spec package: 'omnibaseExtensions' with: 'omnibaseExtensions-NicolasPetton.25'.		]! !!ConfigurationOfOmniBase methodsFor: 'baselines' stamp: 'sebastiansastre 12/8/2011 11:03'!baseline10: spec    <version: '1.0-baseline'>    	spec for: #squeakCommon do: [		spec blessing: #baseline.		spec repository: 'http://www.squeaksource.com/odb'.			spec project: 'FFI' with: [ spec				className: 'ConfigurationOfFFI';				file: 'ConfigurationOfFFI';				repository: 'http://squeaksource.com/MetacelloRepository'.				].		spec package: 'OSProcess' with:[ spec repository: 'http://www.squeaksource.com/OSProcess'].		spec package: 'OmniBase'.		spec package: 'Unexpire' with: [spec requires: 'OmniBase'].		spec package: 'omnibasePatch' with: [spec requires: 'OmniBase']..		spec package: 'omnibaseExtensions' with: [spec requires: 'OmniBase'].	]! !!ConfigurationOfOmniBase methodsFor: 'as yet unclassified' stamp: 'sebastiansastre 12/31/2013 11:17'!version13: spec	<version: '1.3' imports: #('1.1-baseline')>		spec for: #common do: [		spec blessing: #release.      	spec description: 'Publishing a maintained OmniBase for Pharo'.  				spec package: 'OmniBase' with: 'OmniBase-sebastiansastre.8'.		spec package: 'Unexpire' with: 'Unexpire-NicolasPetton.20'.		spec package: 'omnibasePatch' with: 'omnibasePatch-sebastiansastre.16'.		spec package: 'omnibaseExtensions' with: 'omnibaseExtensions-NicolasPetton.25'.		]! !!ConfigurationOfOmniBase methodsFor: 'as yet unclassified' stamp: 'sebastiansastre 12/20/2013 14:21'!version12: spec	<version: '1.2' imports: #('1.1-baseline')>		spec for: #common do: [		spec blessing: #release.      	spec description: 'Publishing a maintained OmniBase for Pharo'.  				spec package: 'OmniBase' with: 'OmniBase-NicolasPetton.7'.		spec package: 'Unexpire' with: 'Unexpire-NicolasPetton.20'.		spec package: 'omnibasePatch' with: 'omnibasePatch-sebastiansastre.16'.		spec package: 'omnibaseExtensions' with: 'omnibaseExtensions-NicolasPetton.25'.		]! !!ConfigurationOfOmniBase methodsFor: 'as yet unclassified' stamp: 'sebastiansastre 12/20/2013 14:20'!baseline11: spec    <version: '1.1-baseline'>    	spec for: #squeakCommon do: [		spec blessing: #baseline.		spec repository: 'http://www.squeaksource.com/odb'.			spec project: 'FFI' with: [ spec				className: 'ConfigurationOfFFI';				file: 'ConfigurationOfFFI';				repository: 'http://squeaksource.com/MetacelloRepository'.				].		spec project: 'OSProcess' with: [ spec				className: 'ConfigurationOfOSProcess';				file: 'ConfigurationOfOSProcess';				repository: 'http://squeaksource.com/MetacelloRepository'.				].		spec package: 'OmniBase'.		spec package: 'Unexpire' with: [spec requires: 'OmniBase'].		spec package: 'omnibasePatch' with: [spec requires: 'OmniBase']..		spec package: 'omnibaseExtensions' with: [spec requires: 'OmniBase'].	]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ConfigurationOfOmniBase class	instanceVariableNames: ''!!ConfigurationOfOmniBase class commentStamp: '<historical>' prior: 0!!!ConfigurationOfOmniBase class methodsFor: 'metacello tool support' stamp: 'sebastiansastre 12/7/2011 23:46'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfOmniBase class methodsFor: 'metacello tool support' stamp: 'sebastiansastre 12/7/2011 23:46'!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!ConfigurationOfOmniBase class methodsFor: 'metacello tool support' stamp: 'sebastiansastre 12/7/2011 23:46'!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!ConfigurationOfOmniBase class methodsFor: 'accessing' stamp: 'sebastiansastre 12/7/2011 23:46'!project	^self new project! !!ConfigurationOfOmniBase class methodsFor: 'loading' stamp: 'sebastiansastre 12/7/2011 23:46'!load	^self project latestVersion load! !!ConfigurationOfOmniBase class methodsFor: 'private' stamp: 'sebastiansastre 12/7/2011 23:46'!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfOmniBase class methodsFor: 'private' stamp: 'sebastiansastre 12/7/2011 23:46'!ensureMetacello	"Bootstrap Gofer (if necessary), bootstrap ConfigurationOfMetacello (using old Gofer API), then load the latest 	version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [		Smalltalk at: #Gofer ifAbsent: [			"Current version of Gofer from which to bootstrap - as of 1.0-beta.15"			self bootstrapPackage: 'Gofer-lr.83' from: 'http://seaside.gemstone.com/ss/metacello' ].		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |			gofer := goferClass new				url: 'http://seaside.gemstone.com/ss/metacello';				yourself.			[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].			gofer load ].		"load 'default' group of Metacello"		(Smalltalk at: #ConfigurationOfMetacello) perform: #load ]! !!ConfigurationOfOmniBase class methodsFor: 'metacello tool support' stamp: 'sebastiansastre 12/7/2011 23:46'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfOmniBase class methodsFor: 'metacello tool support' stamp: 'sebastiansastre 12/7/2011 23:46'!lastMetacelloVersionLoad	"Answer the last version loaded and the list of packages loaded for that version."	LastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> 'default' ].	^LastVersionLoad! !!ConfigurationOfOmniBase class methodsFor: 'metacello tool support' stamp: 'sebastiansastre 12/7/2011 23:46'!metacelloVersion: versionString loads: anArrayOrString	"Stash the last version loaded and the list of packages loaded for that version. The list	 of packages will be used by the tools when doing 'Load Package Version'"	LastVersionLoad := versionString -> anArrayOrString! !!ConfigurationOfOmniBase class methodsFor: 'accessing' stamp: 'sebastiansastre 12/7/2011 23:46'!project	^self new project! !!ConfigurationOfOmniBase class methodsFor: 'loading' stamp: 'sebastiansastre 12/7/2011 23:46'!load	^self project latestVersion load! !!ConfigurationOfOmniBase class methodsFor: 'private' stamp: 'sebastiansastre 12/7/2011 23:46'!bootstrapPackage: aString from: aPath 	| repository version |	repository := MCHttpRepository				location: aPath				user: ''				password: ''.	repository		versionReaderForFileNamed: aString , '.mcz'		do: [:reader | 			version := reader version.			version load.			version workingCopy repositoryGroup addRepository: repository]! !!ConfigurationOfOmniBase class methodsFor: 'private' stamp: 'sebastiansastre 12/7/2011 23:46'!ensureMetacello	"Bootstrap Gofer (if necessary), bootstrap ConfigurationOfMetacello (using old Gofer API), then load the latest 	version of Metacello itself."	Smalltalk at: #MetacelloProject ifAbsent: [		Smalltalk at: #Gofer ifAbsent: [			"Current version of Gofer from which to bootstrap - as of 1.0-beta.15"			self bootstrapPackage: 'Gofer-lr.83' from: 'http://seaside.gemstone.com/ss/metacello' ].		Smalltalk at: #Gofer ifPresent: [:goferClass | | gofer |			gofer := goferClass new				url: 'http://seaside.gemstone.com/ss/metacello';				yourself.			[ gofer addPackage: 'ConfigurationOfMetacello' ] on: Warning do: [:ex | ex resume ].			gofer load ].		"load 'default' group of Metacello"		(Smalltalk at: #ConfigurationOfMetacello) perform: #load ]! !